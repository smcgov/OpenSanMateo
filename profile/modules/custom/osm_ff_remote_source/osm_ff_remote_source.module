<?php

/**
 * @file
 * Provides a remote stream wrapper and filefield source integration.
 */

define('REMOTE_FILE_SOURCE_HINT_TEXT', 'http://example.com/files/file.zip');

/**
 * Implements hook_filefield_sources_info().
 */
function osm_ff_remote_source_filefield_sources_info() {
  $source = array();
  $source['osmremotefile'] = array(
    'name' => t('OSM Remote File'),
    'label' => t('OSM Remote File'),
    'description' => t('Link to a file located on a remote server.'),
    'process' => 'osm_ff_remote_source_field_process',
    'value' => 'osm_ff_remote_source_value',
    'weight' => 3,
  );
  return $source;
}

/**
 * Implements hook_theme().
 */
function osm_ff_remote_source_theme() {
  return array(
    'osm_ff_remote_source_element' => array(
      'render element' => 'element',
    ),
  );
}

/**
 * Theme the output of the autocomplete field.
 */
function theme_osm_ff_remote_source_element($variables) {
  $element = $variables['element'];

  $element['url']['#field_suffix'] = drupal_render($element['select']);
  $view = views_get_view('opensanmateo_media_browser');

  //Here we ask for osm_ff_remote_source_form_set to place are form on the page and we insert a placeholder div js will move the form we need back
  $id = uniqid();
  $element['url']['#field_prefix'] = "<div id='$id'></div>";
  osm_ff_remote_source_form_set($element['#form_build_id'], "<div for='$id' class ='osm-ff-move'>" . views_embed_view('opensanmateo_media_browser', 'default') . "</div>") ;
  return '<div class="filefield-source filefield-source-osmremotefile clear-block">' . drupal_render($element['url']) . '</div>';

}
/**
 * Keep track for view forms that need to be inserted in to a form build
 *
 * PARAM $buid_id: the build id for the form that will use the form inserts
 * PARAM $form: the html that will need to be injected into the form (this is a view out put for the most part
 * RETURN all of the elements that are slated to be placed on a build
 */
function osm_ff_remote_source_form_set($build_id, $form = NULL) {
  static $forms;
  $forms = is_array($forms) ? $forms : array();
  if($form) {
    $forms[$build_id][] = $form;
  }
  if(isset($forms[$build_id])) {
    return implode('', $forms[$build_id]);
  }
  return '';

}
function osm_ff_remote_source_form_post_render($page, $form) {
  $page = $page . osm_ff_remote_source_form_set($form['#build_id']);
  return $page;
}

/**
 * Implements hook_form_alter().
 *
 * Add a post render to the form so we can add our views (which have a form in them)
 */
function osm_ff_remote_source_form_alter(&$form) {
  $form['#post_render'][] = 'osm_ff_remote_source_form_post_render';
}

function osm_ff_remote_source_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  $view = $form_state['view'];

  if ($view->name == 'opensanmateo_media_browser') {

    // Disable auto submit if we're not on a node edit page.
    // @todo: this was causing issues in the IPE. Perhaps
    // go back and write our own auto submit code for within the IPE
    // context.
    if (arg(0) != 'node' && (arg(1) != 'add' || arg(2) != 'edit')) {
      unset($form['#attributes']['class']);
      unset($form['submit']['#attributes']['class']);
    }

    $topic = taxonomy_vocabulary_machine_name_load('subject');
    $topics = taxonomy_get_tree($topic->vid);
    $topic_options = array('' => "-- None --");
    foreach ($topics as $t) {
      $topic_options[$t->name] = str_repeat('-', $t->depth) . $t->name;
    }

    if (!empty($topic_options)) {
      unset($form['#info']['filter-search_api_multi_aggregation_2']);
      $form['search_api_multi_aggregation_2']['#title'] = $topic->name;
      $form['search_api_multi_aggregation_2']['#type'] = 'select';
      $form['search_api_multi_aggregation_2']['#size'] = 1;
      $form['search_api_multi_aggregation_2']['#options'] = $topic_options;
    }
    else {
      $form['search_api_multi_aggregation_2']['#access'] = FALSE;
    }
  }
}
/**
 * A #process callback to extend the filefield_widget element type.
 */
function osm_ff_remote_source_field_process($element, &$form_state, &$form) {
  $form['#is_osm_ff_remote_source_form'] = TRUE;
  $item = $element['#value'];
  unset($form['#post_render']);

  $element['filefield_remotefile'] = array(
    '#weight' => 100.5,
    '#theme' => 'osm_ff_remote_source_element',
    '#filefield_source' => TRUE, // Required for proper theming.
    '#filefield_sources_hint_text' => REMOTE_FILE_SOURCE_HINT_TEXT,
    '#form_build_id' => $form['#build_id'],
  );


  $element['filefield_remotefile']['url'] = array(
    '#type' => 'textfield',
    '#maxlength' => NULL,
    '#attached' => array(
      'js'=> array( drupal_get_path('module', 'osm_ff_remote_source') . '/osm_ff_remote_source.js'),
      'css'=> array( drupal_get_path('module', 'osm_ff_remote_source') . '/osm_ff_remote_source.css')
    ),
  );

  $element['filefield_remotefile']['select'] = array(
    '#name' => implode('_', $element['#array_parents']) . '_select',
    '#type' => 'submit',
    '#value' => t('Select'),
    '#validate' => array(),
    '#submit' => array('filefield_sources_field_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#ajax' => array(
      'path' => 'file/ajax/' . implode('/', $element['#array_parents']) . '/' . $form['form_build_id']['#value'],
      'wrapper' => $element['#id'] . '-ajax-wrapper',
      'effect' => 'fade',
      'method' => 'replace',
    ),
    '#suffix' => '<div class="description">' . t('This field will ignore the file size limitation') . '</div>',
  );

  if (!empty($item['fid']) && osm_ff_remote_source_is_sharable($item)) {

    $element['share_fieldset'] = array(
      '#title' => t('Share Settings'),
      '#type' => 'fieldset',
    );

    // Hide the share settings when the share checkbox is not enabled.
    $states = array(
      'invisible' => array(
        ':input[name="' . $element['#name'] . '[share_fieldset][field_share]"]' => array('checked' => FALSE),
      )
    );

    $file = file_load($item['fid']);
    // Add field_share form element.
    $element['share_fieldset']['field_share'] = array(
      '#type' => 'checkbox',
      '#title' => t('Share with other SanMateo Platform sites'),
      '#default_value' => empty($item['field_share'][LANGUAGE_NONE][0]['value']) ? 0 : 1,
      '#access' => osm_ff_remote_source_is_sharable($item),
    );

    $element['share_fieldset']['field_summary'] = array(
      '#type' => 'textarea',
      '#title' => t('Summary'),
      '#weight' => 100,
      '#default_value' => !empty($item['field_summary'][LANGUAGE_NONE][0]['value']) ? $item['field_summary'][LANGUAGE_NONE][0]['value'] : '',
      '#access' => osm_ff_remote_source_is_sharable($item),
      '#states' => $states,
    );


    $topic = taxonomy_vocabulary_machine_name_load('subject');
    $topics = taxonomy_get_tree($topic->vid);
    $topic_options = array('' => "-- None --");
    foreach ($topics as $t) {
      $topic_options[$t->tid] = str_repeat('-', $t->depth) . $t->name;
    }
    $element['share_fieldset']['field_subject'] = array(
      '#type' => 'select',
      '#title' => t('Subject'),
      '#weight' => 100,
      '#options' => $topic_options,
      '#default_value' => !empty($item['field_subject'][LANGUAGE_NONE][0]['tid']) ? $item['field_subject'][LANGUAGE_NONE][0]['tid'] : '',
      '#access' => osm_ff_remote_source_is_sharable($item),
      '#states' => $states,
    );
  }

  return $element;
}

/**
 * Implements hook_form_FORM_ID_alter().
*/
function osm_ff_remote_source_form_file_entity_admin_file_alter(&$form, &$form_state) {
  // Alter in share / unshare selections, as well as our custom submitter.
  $form['admin']['options']['operation']['#options']['share'] = t('Share');
  $form['admin']['options']['operation']['#options']['unshare'] = t('Unshare');
  $form['admin']['options']['submit']['#submit'][] = 'osm_ff_remote_source_form_file_entity_admin_file';
}

/**
 * Submitter for the file_entity_admin_file form.
 *
 * If share / unshare are selected on the form, perform the operation on selected
 * files.
 */
function osm_ff_remote_source_form_file_entity_admin_file($form, &$form_state) {
  if ($form_state['values']['operation'] == 'share' || $form_state['values']['operation'] == 'unshare') {
    foreach ($form_state['values']['files'] as $fid => $selected) {
      if (!empty($selected)) {
        $f = file_load($fid);

        if (osm_ff_remote_source_is_sharable((array) $f)) {
          $file = entity_metadata_wrapper('file', $f);
          $file->field_share->set($form_state['values']['operation'] == 'share' ? 1 : 0);
          $file->save();
        }
      }
    }
  }
}
/**
 * Determine if a given file is sharable.
 *
 * @param  array $file
 *   A file array from a form element #value field.
 *
 * @return bool
 *   True if the file is eligible for sharing, false otherwise.
 */
function osm_ff_remote_source_is_sharable($file) {
  if (isset($file['type']) &&
      $file['type'] === 'image') {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements hook_node_presave().
 */
function osm_ff_remote_source_node_presave($node) {
  // Find all file fields attached to this node, then aggregate a files list
  // from all of them.
  $file_fields = osm_ff_remote_source_get_file_fields($node);
  $shared_files = osm_ff_remote_source_aggregate_files($node, $file_fields, TRUE);

  foreach ($shared_files as $file) {
    // Load files and map / save the share field.
    $f = file_load($file['fid']);
    if (osm_ff_remote_source_is_sharable((array) $f)) {
      $wrapper = entity_metadata_wrapper('file', $f);
      if (property_exists($wrapper, 'field_share')) {
        $wrapper->field_share->set($file['share_fieldset']['field_share']);
      }

      if (property_exists($wrapper, 'field_subject')) {
        if (!empty($file['share_fieldset']['field_subject'])) {
          $wrapper->field_subject->set(array($file['share_fieldset']['field_subject']));
        }
        else {
          // unset the term.
          $wrapper->field_subject->set(array());
        }
      }

      if (property_exists($wrapper, 'field_summary')) {
        $wrapper->field_summary->set($file['share_fieldset']['field_summary']);
      }

      $wrapper->save();
    }
  }
}

/**
 * Aggregate a filtered list of shared or unshared files attached to a node.
 *
 * @param  object  $node
 *   The node to search for files.
 * @param  array  $field_fields
 *   An array of file field names.
 * @param  boolean $shared
 *   Filter on whether files should have their share field set or not.
 *
 * @return array
 *   An array of file ids matching filter criteria.
 */
function osm_ff_remote_source_aggregate_files($node, $file_fields, $shared = TRUE) {
  $items = array();

  foreach ($file_fields as $field_name) {
    if ($files = field_get_items('node', $node, $field_name)) {
      $items += $files;
    }
  }

  return $items;
}

/**
 * Get a list of file fields associated with a specific node.
 *
 * @param  object $node
 *   The node to find attached file fields on.
 *
 * @return array
 *   An array of file field names
 */
function osm_ff_remote_source_get_file_fields($node) {
  $fields = field_info_instances('node', $node->type);
  $file_fields = array();

  foreach ($fields as $field_name => $field) {
    if (!empty($field['widget']['module']) && in_array($field['widget']['module'], array('file', 'image'))) {
      $file_fields[$field_name] = $field;
    }
  }

  return array_keys($file_fields);
}

/**
 * A #filefield_value_callback function.
 */
function osm_ff_remote_source_value($element, &$item) {
  if (isset($item['filefield_remotefile']['url']) && drupal_strlen($item['filefield_remotefile']['url']) > 0 && $item['filefield_remotefile']['url'] != REMOTE_FILE_SOURCE_HINT_TEXT) {
    $value = $item['filefield_remotefile']['url'];
    if (!valid_url($value, TRUE)) {
      form_error($element, t('Invalid Remote File URL.'));
      return;
    }
    elseif (!file_stream_wrapper_valid_scheme(file_uri_scheme($value))) {
      // Check that the scheme is supported.
      form_error($element, t('Remote File URLs with the %scheme scheme are not supported.', array('%scheme' => $scheme)));
      return;
    }
    else {
      // Check that the file exists.
      $request = drupal_http_request($value, array('method' => 'HEAD'));
      if (!empty($request->error)) {
        form_error($element, t('Unable to fetch file from Remote File URL %url (error @code: %error).', array('%url' => $value, '@code' => $request->code, '%error' => $request->error)));
        return;
      }
    }

    try {
      $file = remote_stream_wrapper_file_load_by_uri($value);
      if (!$file) {
        $file = remote_stream_wrapper_file_create_by_uri($value);
        $file->status = FALSE;
        file_save($file);
      }
    }
    catch (Exception $e) {
      form_set_error('url', $e->getMessage());
      return;
    }

    if (empty($file->fid)) {
      form_set_error($element, t('Unable to add file from URL %file.', array('%file' => $value)));
      return;
    }

    // Run all the normal validations, minus file size restrictions.
    if (isset($element['#upload_validators']['file_validate_size'])) {
      unset($element['#upload_validators']['file_validate_size']);
    }

    if (filefield_sources_element_validate($element, (object) $file)) {
      $item = array_merge($item, (array) $file);
    }
  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function osm_ff_remote_source_preprocess_views_view_fields(&$vars) {
  $uuid = uniqid();

  // Add check since apparently $vars['row']->_entity_properties isn't always present; set reasonable default if missing
  $url = !empty($vars['row']->_entity_properties['url']) ? $vars['row']->_entity_properties['url'] : '';

  if (!empty($url)) {
    $vars['fields']['nothing'] = (object) array(
      'content' => theme('image', array(
        'path' => $url,
        'attributes' => array('class' => 'osm_ff_remote_source_preview'),
      )),

      // Add these to prevent views-view-fields.tpl.php from losing its mind
      'class' => '',            // The safe class id to use.
      'inline' => FALSE,        // Whether or not the field should be inline.
      'wrapper_prefix' => '',   // A complete wrapper containing the inline_html to use.
      'wrapper_suffix' => '',   // The closing tag for the wrapper.
      'label' => '',            // The wrap label text to use.
      'label_html' => '',       // The full HTML of the label to use including
    );
  }
  //TODO revist a way to make each file unq with out braking the widget validation
  #$vars['fields']['url']->content = $url . "#" . $uuid;
}
