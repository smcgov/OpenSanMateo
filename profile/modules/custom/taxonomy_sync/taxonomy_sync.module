<?php
/**
 * @file
 *
 * When enabled and configured, provides vocabulary synchronization support between a master site and client sites
 */

require_once 'taxonomy_sync.constants.inc';
define('TAXONOMY_SYNC_MASTER_PREFIX', 'taxonomy_sync_is_master_for_');
define('TAXONOMY_SYNC_CLIENT_PREFIX', 'taxonomy_sync_is_client_for_');

class TaxonomySyncMissingVocabulary extends Exception { }
class TaxonomySyncNoServer extends Exception { }
class TaxonomySyncRequestFail extends Exception { }
class TaxonomySyncNoLocal extends Exception { }
class TaxonomoySyncFailedMerge extends Exception { }
class TaxonomySyncDeleteFailedDelete extends Exception { }
/**
 * Implementation of hook_menu()
 */
function taxonomy_sync_menu() {
  $items = array();

  $items['taxonomy-sync/list/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'taxonomy_sync_list',
    'page arguments' => array(2),
    'access callback' => 'taxonomy_sync_list_access',
    'access arguments' => array(2),
  );

  return $items;
}

/**
 * access callback for list pages
 */
function taxonomy_sync_list_access($name) {
  $is_master = taxonomy_sync_is_master($name);
  if (!$is_master) {
    $client_ip = $_SERVER["REMOTE_ADDR"];
    watchdog(TAXONOMY_SYNC_WATCHDOG, 'Term list requested for non-master vocabulary @name by client @client_ip', array('@name' => $name, '@client_ip' => $client_ip), WATCHDOG_WARNING);
  }
  return $is_master;
}

/**
 * Menu callback to generate list of terms for client request
 */
function taxonomy_sync_list($name) {
  $payload = array(
    'name' => $name,
    'tree' => FALSE,
    'error' => FALSE,
    'error message' => '',
  );
  try {
    $payload['tree'] = taxonomy_sync_get_tree($name);
  }
  catch (TaxonomySyncMissingVocabulary $e) {
    watchdog(TAXONOMY_SYNC_WATCHDOG, 'Term list requested for non-existent vocabulary @name by client @client_ip', array('@name' => $name, '@client_ip' => $client_ip), WATCHDOG_WARNING);
    $payload['error message'] = $e->message;
    $payload['error'] = 'TaxonomySyncMissingVocabulary';
  }
  drupal_json_output($payload);
}

/**
 * return if this site is the master for the named vocabulary
 * PARAM name: machine name of a vocabulary
 * RETURN bool
 */
function taxonomy_sync_is_master($name) {
  return variable_get(TAXONOMY_SYNC_MASTER_PREFIX . $name, FALSE);
}

/**
 * Function to pull a tree of data on a machine name
 */
function taxonomy_sync_get_tree($name) {
  if ($voc = taxonomy_vocabulary_machine_name_load($name)) {
    $tree = taxonomy_get_tree($voc->vid);
    return $tree;
  }
  else {
    throw new TaxonomySyncMissingVocabulary("No vocabulary $name");
  }
}



/**
 * return if this site is the master for the named vocabulary
 * PARAM name: machine name of a vocabulary
 * RETURN bool
 */
function taxonomy_sync_get_master($name, $return_false = FALSE) {
  $url = variable_get(TAXONOMY_SYNC_CLIENT_PREFIX . $name, FALSE);
  if ($url) {
    return $url;
  }
  else {
    throw new TaxonomySyncNoServer("No Master for $name");
  }
}

/**
 * implements hook_cron
 *
 * Try syncing all of the vocabularies
 */
function taxonomy_sync_cron() {
  taxonomy_sync_sync();
}

/**
 * THis function sync all vocabularies
 *
 * It catch all exceptions and logs them to watch dog
 */
function taxonomy_sync_sync() {
  $vocs = taxonomy_vocabulary_get_names();
  foreach ($vocs as $name => $voc) {
    try {
      $url = taxonomy_sync_get_master($name);
      watchdog(TAXONOMY_SYNC_WATCHDOG, "$name - $url");
      $data = taxonomy_sync_pull_data($url);
      taxonomy_sync_sync_vocabulary($data, $name);
    }
    catch (TaxonomySyncNoServer $e) {
    }
    catch (Exception $e) {
      watchdog_exception(TAXONOMY_SYNC_WATCHDOG, $e);
    }
  }

}

/**
 * sync a vocabularies terms
 */
function taxonomy_sync_sync_vocabulary($data, $vocabulary) {
  $sync = new TaxonomySyncData($data, $vocabulary);
  $sync->process();
}

/**
 * Try and pull data for a url
 * PARAM url: the url for the master vocab
 * RETURN: a Tree from a remote site
 * THROWS: TaxonomySyncRequestFail, TaxonomySyncMissingVocabulary
 */
function taxonomy_sync_pull_data($url) {
  $resp = drupal_http_request($url);
  if (200 == $resp->code) {
    // Decode JSON and make sure we have a valid response
    $resp_array = drupal_json_decode($resp->data);
    if ($resp_array) {
      if ($resp_array['error']) {
        throw new TaxonomySyncRequestFail($resp_array['error_message']);
      }
      else {
        return $resp_array['tree'];
      }
    }
    else {
      throw new TaxonomySyncRequestFail(format_string('Failed to decode JSON data retrieved from master @url', array('@url' => $url)));
    }
  }
  else if (403 == $resp->code) {
    throw new TaxonomySyncMissingVocabulary("Master $url nodes not provide vocabulary $name");
  }
  else {
    throw new TaxonomySyncRequestFail(t('the @url failed with code @code', array('@url' => $url, '@code' => $resp->code)) );
  }
}

/**
 * A class for handling the sync of Data from a a master to a slave
 */
class TaxonomySyncData{
  public $master_data = array();
  public $vid;
  public $stats;
  public $updates = FALSE;
  public $inserts = FALSE;
  public $deletes = FALSE;
  public $cache_tid_map = array(0 => 0);
  public $cache_hash_map = FALSE;
  public $missing_parent = array();

  /**
   * constructor
   * PARAM master_data: an array structure like a taxonomy_tree return
   * PARAM $vocabulary: a machine name or vid of the local vocabulary
   */
  function __construct($master_data, $vocabulary) {
    $this->set_master_data($master_data);
    $this->set_vid($vocabulary);
  }

  /**
   * set the vid for this obj, can be the vid or the machine name
   */
  protected function set_vid($vocabulary) {
    if(is_numeric($vocabulary)) {
      $this->vid = $vocabulary;
    }
    else {
      if($voc = taxonomy_vocabulary_machine_name_load($vocabulary)) {
        $this->vid = $voc->vid;
      }
      else {
        throw new TaxonomySyncMissingVocabulary("No vocabulary {$vocabulary->$name}");
      }
    }
  }

  /**
   * sets master data in an array keyed by master tid
   */
  protected function set_master_data($master_data) {
    foreach ($master_data as $datum) {
      $datum = (object) $datum;
      $datum->TAXONOMY_SYNC_COL_LAST_UPDATE_HASH = $this->term_hash($datum);
      $this->master_data[$datum->tid] = $datum;
    }
  }

  /**
   * return all of the master tids that are to be processed
   */
  public function get_master_ids() {
    return array_keys($this->master_data);
  }

  /**
   * return a hash of a term
   */
  static function term_hash($term) {
    return md5(serialize($term));
  }

  /**
   * return a map of master tid to a hash
   */
  protected function get_hash_map() {
    if (!$this->cache_hash_map) {
      foreach ($this->master_data as $id => $datum) {
        $this->cache_hash_map[$id] = $datum->TAXONOMY_SYNC_COL_LAST_UPDATE_HASH;
      }
    }
    return $this->cache_hash_map;
  }

  /**
   * returns and array of master tid => local tid that are candidates for updates
   */
  protected function get_update_ids() {
    if (!$this->updates) {
      $query = db_select(TAXONOMY_SYNC_TABLE, 't');
      $query->fields('t', array(TAXONOMY_SYNC_COL_MASTER_TID, TAXONOMY_SYNC_COL_LOCAL_TID));
      $query->condition(TAXONOMY_SYNC_COL_MASTER_TID, $this->get_master_ids(), 'IN');
      $query->condition(TAXONOMY_SYNC_COL_LAST_UPDATE_HASH, $this->get_hash_map(), 'NOT IN');
      $this->updates = $query->execute()->fetchAllKeyed();
    }
    return $this->updates;
  }

  /**
   * returns array of master ids for insertions
   */
  protected function get_insert_ids() {
    if (!$this->inserts) {
      $query = db_select(TAXONOMY_SYNC_TABLE, 't');
      $query->fields('t', array(TAXONOMY_SYNC_COL_MASTER_TID, TAXONOMY_SYNC_COL_LOCAL_TID));
      $query->condition(TAXONOMY_SYNC_COL_MASTER_TID, $this->get_master_ids(), 'IN');
      $query->condition(TAXONOMY_SYNC_COL_LOCAL_VID, $this->vid, '=');
      $existing = $query->execute()->fetchAllKeyed();

      $this->inserts = array_diff($this->get_master_ids(), array_keys($existing));
    }
    return $this->inserts;
  }

  /**
   * return array of Local tids for deletion
   */
  protected function get_delete_ids() {
    if (!$this->deletes) {
      $query = db_select(TAXONOMY_SYNC_TABLE, 't');
      $query->fields('t', array(TAXONOMY_SYNC_COL_LOCAL_TID, TAXONOMY_SYNC_COL_LOCAL_TID));
      $query->condition(TAXONOMY_SYNC_COL_MASTER_TID, $this->get_master_ids(), 'NOT IN');
      $query->condition(TAXONOMY_SYNC_COL_LOCAL_VID, $this->vid, '=');
      $this->deletes = $query->execute()->fetchAllKeyed();
    }
    return $this->deletes;
  }


  public function process() {
    $this->process_inserts();
    $this->process_updates();
    $this->process_deletes();
    $this->process_missing_parents();
    $this->process_cleanup();
    return $this;
  }

  /**
   * remove all terms not managed by sync
   */
  public function process_cleanup() {
    $query = db_select('taxonomy_term_data', 't');
    $query->leftJoin(
      TAXONOMY_SYNC_TABLE,
      's',
        's.' . TAXONOMY_SYNC_COL_LOCAL_TID . ' = t.tid AND s.' . TAXONOMY_SYNC_COL_LOCAL_VID . ' = t.vid');
    $query->fields('t', array('tid', 'vid'));
    $query->condition('t.vid', $this->vid, '=');
    $query->isNull('s.' .TAXONOMY_SYNC_COL_LOCAL_VID);
    $results = $query->execute()->fetchAllKeyed();
    foreach ($results as $tid) {
      try {
        $this->delete_term($tid);
      }
      catch (TaxonomySyncDeleteFailedDelete $e) {
        watchdog_exception(TAXONOMY_SYNC_WATCHDOG, $e);
      }
    }

    // Remove terms that don't exist.
    $purge_query = db_select(TAXONOMY_SYNC_TABLE, 's');
    $purge_query->fields('s');
    $purge_query->leftJoin('taxonomy_term_data',
      't',
        't.tid = s.' . TAXONOMY_SYNC_COL_LOCAL_TID . ' AND s.' . TAXONOMY_SYNC_COL_LOCAL_VID . ' = t.vid');
    $purge_query->isNull('t.tid');
    $purge_results = $purge_query->execute()->fetchAll();
    if (!empty($purge_results)) {
      foreach ($purge_results as $result) {
        try {
          $this->delete_term($result->local_tid);
        }
        catch (TaxonomySyncDeleteFailedDelete $e) {
          watchdog_exception(TAXONOMY_SYNC_WATCHDOG, $e);
        }
      }
    }
  }
  /**
   * process all updates
   */
  public function process_updates() {
    foreach($this->get_update_ids() as $master_id => $local_tid) {
      try {
        $this->merge_term($this->get_master_term($master_id), taxonomy_term_load($local_tid));
      }
      catch (TaxonomoySyncFailedMerge $e) {
        watchdog_exception(TAXONOMY_SYNC_WATCHDOG, $e);
      }
    }
  }

  /**
   * process all inserts
   */
  public function process_inserts() {
    foreach ($this->get_insert_ids() as $master_id) {
      try {
        $this->merge_term($this->get_master_term($master_id));
      }
      catch (TaxonomoySyncFailedMerge $e) {
        watchdog_exception(TAXONOMY_SYNC_WATCHDOG, $e);
      }
    }
  }

  /**
   * process all deletes
   */
  public function process_deletes() {
    foreach ($this->get_delete_ids() as $tid) {
      try {
        $this->delete_term($tid);
      }
      catch (TaxonomySyncDeleteFailedDelete $e) {
        watchdog_exception(TAXONOMY_SYNC_WATCHDOG, $e);
      }
    }
  }

  /**
   * process all missing parents
   */
  public function process_missing_parents() {
    foreach ($this->get_missing_parents_ids() as $master_id => $local_tid) {
      try {
        $this->merge_term($this->get_master_term($master_id), taxonomy_term_load($local_tid));
      }
      catch (TaxonomoySyncFailedMerge $e) {
        watchdog_exception(TAXONOMY_SYNC_WATCHDOG, $e);
      }
    }
  }
  /**
   * return a master term object
   */
  protected function get_master_term($id) {
    return $this->master_data[$id];
  }

  /**
   * get a local tid based on its maping to a master tid
   */
  protected function get_local_tid($master_tid) {
    if (!isset($this->cache_tid_map[$master_tid])) {
      $query = db_select(TAXONOMY_SYNC_TABLE, 't');
      $query->fields('t', array(TAXONOMY_SYNC_COL_LOCAL_TID));
      $query->condition(TAXONOMY_SYNC_COL_MASTER_TID, $master_tid, '=');
      $this->cache_tid_map[$master_tid] = $query->execute()->fetchField();
    }
    if (!$this->cache_tid_map[$master_tid] && $master_tid != 0) {
      throw new TaxonomySyncNoLocal("There is no local tid for master tid $master_tid");
    }
    return $this->cache_tid_map[$master_tid];
  }

  /**
   * record a record as missing a parent (needs to be rerun)
   */
  protected function add_missing_parent($master_tid) {
    $this->missing_parent[] = $master_tid;
  }

  /**
   * return an array of master to local tids that need to be run to update parents
   */
  protected function get_missing_parents_ids() {
    $map = array();
    foreach ($this->missing_parent as $master_id) {
      $map[$master_id] = $this->get_local_tid($master_id);
    }
    return $map;
  }

  /**
   * Method to remove a term from the target vocabulary and the sync tables
   */
  protected function delete_term($local_tid) {
    $result = taxonomy_term_delete($local_tid);
    if (SAVED_DELETED == $result) {
      // If successfully deleted, update our sync table
      try {
        $query = db_delete(TAXONOMY_SYNC_TABLE)
          ->condition(TAXONOMY_SYNC_COL_LOCAL_TID, $local_tid)
          ->execute();
      }
      catch (Exception $e) {
        throw new TaxonomySyncDeleteFailedDelete($e->getMessage());
      }
    }
    else {
      $message = format_string('Failed to delete term @ltid with master tid @mtid in vocabulary @vid', array('@ltid' => $tid, '@mtid' => $local_sync[TAXONOMY_SYNC_COL_MASTER_TID], '@vid' => $vid));
      throw new TaxonomySyncDeleteFailedDelete($message);
    }
  }

  /**
   * method for merging a term from the master to the local, can be for updates or inserts
   */
  protected function merge_term($master_term, $local_term = NULL) {
    // Extract and unset parents array from term; not being honored by term save code
    $master_parents = isset($master_term->parents) ? $master_term->parents : $master_term->parent;
    $master_tid = $master_term->tid;
    unset($master_term->parents);

    //using local info, set some reasonable defaults
    $term = clone $master_term;
    $term->vid = $this->vid;
    $term->tid = isset($local_term) ? $local_term->tid: NULL;
    $term->parent = 0;

    // Sync master term's first parent tid up to local tid, or 0 if no parent
    if (!empty($master_parents)) {
      try {
        $term->parent = $this->get_local_tid($master_parents[0]);
      }
      catch (TaxonomySyncNoLocal $e) {
        $this->add_missing_parent($master_tid);
      }
    }
    // Save out term
    $result = taxonomy_term_save($term);
    $record = (object) array(
      TAXONOMY_SYNC_COL_MASTER_TID => $master_tid,
      TAXONOMY_SYNC_COL_LOCAL_VID => $this->vid,
      TAXONOMY_SYNC_COL_LOCAL_TID => $term->tid,
      TAXONOMY_SYNC_COL_LAST_UPDATE_HASH => $master_term->TAXONOMY_SYNC_COL_LAST_UPDATE_HASH,
    );
    if (SAVED_NEW == $result) {
      drupal_write_record(TAXONOMY_SYNC_TABLE, $record);
      unset($this->cache_tid_map[$master_tid]);
    }
    elseif (SAVED_UPDATED == $result) {
      drupal_write_record(TAXONOMY_SYNC_TABLE, $record, TAXONOMY_SYNC_COL_LOCAL_TID);
    }
    else {
      throw new TaxonomoySyncFailedMerge(format_string('Failed to store term %name with master tid @tid in vocabulary @vid', array('%name' => $term->name, '@tid' => $master_tid, '@vid' => $this->vid)));
    }
  }
}

/**
 * Implements hook_form_taxonomy_form_vocabulary_alter()
 *
 * Add taxonomy sync fields to vocabulary form
 */
function taxonomy_sync_form_taxonomy_form_vocabulary_alter(&$form) {
  $name = $form['#vocabulary']->machine_name;
  $form['taxonomy_sync'] = array(
    '#type' => 'fieldset',
    '#title' => 'Taxonomy Sync',
  );
  $form['taxonomy_sync'][TAXONOMY_SYNC_MASTER_PREFIX . $name] = array(
    '#type' => 'checkbox',
    '#description' => t('Checking this box will expose this vocabulary for syncing at %url.', array('%url' => url("taxonomy-sync/list/$name", array('absolute' => TRUE)))),
    '#default_value' =>  variable_get(TAXONOMY_SYNC_MASTER_PREFIX . $name, FALSE),
    '#title' => t("Is a Master Vocabulary"),
    '#states' => array(
      'invisible' => array(
        ':input[name="' . TAXONOMY_SYNC_MASTER_PREFIX . $name . '"]' => array('checked' => FALSE),
        ':input[name="' . TAXONOMY_SYNC_CLIENT_PREFIX . $name . '"]' => array('!value' => ''),
      ),
    ),
  );
  $form['taxonomy_sync'][TAXONOMY_SYNC_CLIENT_PREFIX . $name] = array(
    '#type' => 'textfield',
    '#description' => t('If this vocaulary is a client then the url for the master should be place here (You can find the url on the taxonomy edit screen of the master site'),
    '#default_value' =>  variable_get(TAXONOMY_SYNC_CLIENT_PREFIX . $name, FALSE),
    '#title' => t("URI of Master site"),
    '#states' => array(
      'invisible' => array(
        ':input[name="' . TAXONOMY_SYNC_MASTER_PREFIX . $name . '"]' => array('checked' => TRUE),
        ':input[name="' . TAXONOMY_SYNC_CLIENT_PREFIX . $name . '"]' => array('value' => ''),
      ),
    ),
  );
  $form['#submit'][] = 'taxonomy_sync_form_taxonomy_form_vocabulary_submit';
  $form['#validate'][] = 'taxonomy_sync_form_taxonomy_form_vocabulary_validate';
}


/**
 * Form validation handler for taxonomy_sync_form_taxonomy_form_vocabulary_alter().
 *
 * @param $form
 * @param $form_state
 * @param array $edit
 */
function taxonomy_sync_form_taxonomy_form_vocabulary_validate($form, &$form_state, $edit = array()) {
  // Ensure that the taxonomy_sync module cannot be configured as both slave
  // and master.
  $name = $form['#vocabulary']->machine_name;
  $client = TAXONOMY_SYNC_CLIENT_PREFIX . $name;
  $master = TAXONOMY_SYNC_MASTER_PREFIX . $name;
  if ($form_state['values'][$client] && $form_state['values'][$master]) {
    form_set_error($client, t('Taxonomy sync cannot be configured as both a master and a client.'));
  }
}

/**
 * Submit handler for taxonomy_sync_form_taxonomy_form_vocabulary_alter()
 */
function taxonomy_sync_form_taxonomy_form_vocabulary_submit($form, $form_state) {
  $name = $form['#vocabulary']->machine_name;
  variable_set(TAXONOMY_SYNC_MASTER_PREFIX . $name, $form_state['values'][TAXONOMY_SYNC_MASTER_PREFIX . $name]);
  variable_set(TAXONOMY_SYNC_CLIENT_PREFIX . $name, $form_state['values'][TAXONOMY_SYNC_CLIENT_PREFIX . $name]);
}
