<?php
/**
 * @file
 * Code for the OpenSanMateo Search feature.
 */

include_once 'opensanmateo_layout.features.inc';
/**
 * @file
 * Code for the OpenSanMateo Example feature.
 */

/**
 * Implements hook_ctools_plugin_directory().
 */
function opensanmateo_layout_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implements hook_theme()
 */
function opensanmateo_layout_theme() {
  return array(
    'opensanmateo_layout_site_brand' => array(
      'template' => 'opensanmateo_layout_site_brand',
      'variables' => array(
        'logo' => NULL,
        'slogan' => NULL,
        'name' => NULL,
      ),
    )
  );
}

/**
 * Implementation of hook_context_default_contexts_alter().
 */
function opensanmateo_layout_context_default_contexts_alter(&$contexts) {
  // Disable default openpublic contexts.
  if (!empty($contexts['nav_press_release'])) {
    unset($contexts['nav_press_release']);
  }

  if (!empty($contexts['nav_blog'])) {
    unset($contexts['nav_blog']);
  }

  if (!empty($contexts['leadership'])) {
    unset($contexts['leadership']);
  }

  if (!empty($contexts['popular_content'])) {
    unset($contexts['popular_content']);
  }

  // Diable the global context on master sites.
  if (!empty($contexts['opensanmateo_global']) && sanmateo_is_master()) {
    unset($contexts['opensanmateo_global']);
  }
}

/**
 * Implements hook_block_info().
 */
function opensanmateo_layout_block_info() {
  $blocks['opensanmateo_layout_banner'] = array(
    'info' => t('Shared Banner'),
    'cache' => DRUPAL_CACHE_GLOBAL
  );
  $blocks['opensanmateo_layout_site_brand'] = array(
    'info' => t('Site Brand'),
    'cache' => DRUPAL_CACHE_GLOBAL
  );

  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function opensanmateo_layout_block_configure($delta = '') {
  $form = array();
  if ($delta == 'opensanmateo_layout_banner') {
    $form['banner_content'] = array(
      '#type' => 'text_format',
      '#title' => t('Banner block content'),
      '#description' => t('The contents of the block we\'re going to share across our sites.'),
      '#default_value' => variable_get('opensanmateo_layout_banner_content', ''),
      '#format' => variable_get('opensanmateo_layout_banner_format', NULL),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */
function opensanmateo_layout_block_save($delta = '', $edit = array()) {
  if ($delta == 'opensanmateo_layout_banner') {
    variable_set('opensanmateo_layout_banner_content', $edit['banner_content']['value']);
    variable_set('opensanmateo_layout_banner_format', $edit['banner_content']['format']);
  }
  return;
}

/**
 * Implements hook_block_view().
 */
function opensanmateo_layout_block_view($delta = '') {
  switch ($delta) {
    case 'opensanmateo_layout_banner':
      $block['content'] = variable_get('opensanmateo_layout_banner_content', '');
      break;
    case 'opensanmateo_layout_site_brand':
      $slogan = variable_get('site_slogan', '');
      $name = variable_get('site_name', '');


      $logo = theme('image', array(
        'path' => theme_get_setting('logo'),
        'alt' => 'Logo for ' . $name,
        'attributes' => array(
          'class' => array(
            'logo-img',
          ),
        ),
      ));
      $linked_logo = l($logo, '<front>', array('html' => TRUE));
      $block['content'] = theme('opensanmateo_layout_site_brand', array('logo' => $linked_logo, 'slogan' => $slogan, 'name' => $name));
  }
  return $block;
}

/**
 * implements hook_features_template_info()
 */
function opensanmateo_layout_features_template_info() {
  $all_content_types = array_map(function($i) {return $i->type;}, node_type_get_types());
  $data = array();
  foreach($all_content_types as $content_type) {
    $data[] = array(
      'entity_type' => 'node',
      'bundle_type' => $content_type,
      'mode' => 'default',
      'plugin' => 'panelizer_defaults',
      'deleted' => FALSE,
      'template' => 'opensanmateo_layout_panelizer_defaults_template',
    );
    $data[] = array(
      'name' => "panelizer_defaults_node_$content_type",
      'plugin' => 'strongarm',
      'deleted' => FALSE,
      'template' => 'opensanmateo_layout_strongarm_template',
    );
    $data[] = array(
      'entity_type' => 'node',
      'bundle_type' => $content_type,
      'field' => 'field_custom_layout',
      'plugin' => 'field_instance',
      'deleted' => isset($content_types[$content_type]) &&  $content_types[$content_type],
      'template' => 'opensanmateo_layout_field_custom_layout_template'
    );

  }
  return $data;
}
/**
 * Implements hook_panelizer_defaults().
 */
function opensanmateo_layout_panelizer_defaults_template() {
  $export = array();

  $panelizer = new stdClass();
  $panelizer->disabled = FALSE; /* Edit this to true to make a default panelizer disabled initially */
  $panelizer->api_version = 1;
  $panelizer->name = 'node:site_page:default';
  $panelizer->title = 'Default';
  $panelizer->panelizer_type = 'node';
  $panelizer->panelizer_key = 'site_page';
  $panelizer->no_blocks = FALSE;
  $panelizer->css_id = '';
  $panelizer->css = '';
  $panelizer->pipeline = 'ipe';
  $panelizer->contexts = array();
  $panelizer->relationships = array();
  $panelizer->access = array();
  $panelizer->view_mode = 'page_manager';
  $panelizer->css_class = '';
  $panelizer->title_element = 'H2';
  $panelizer->link_to_entity = TRUE;
  $panelizer->extra = array();
  $display = new panels_display();
  $display->layout = 'one_column';
  $display->layout_settings = array();
  $display->panel_settings = array(
    'style_settings' => array(
      'default' => NULL,
      'center' => NULL,
    ),
  );
  $display->cache = array();
  $display->title = '%node:title';
  $display->content = array();
  $display->panels = array();
    $pane = new stdClass();
    $pane->pid = 'new-1';
    $pane->panel = 'middle';
    $pane->type = 'entity_view';
    $pane->subtype = 'node';
    $pane->shown = TRUE;
    $pane->access = array();
    $pane->configuration = array(
      'view_mode' => 'full',
      'context' => 'panelizer',
      'override_title' => 0,
      'override_title_text' => '',
    );
    $pane->cache = array();
    $pane->style = array(
      'settings' => NULL,
    );
    $pane->css = array();
    $pane->extras = array();
    $pane->position = 0;
    $pane->locks = array();
    $display->content['new-1'] = $pane;
    $display->panels['middle'][0] = 'new-1';
  $display->hide_title = PANELS_TITLE_FIXED;
  $display->title_pane = 'new-1';
  $panelizer->display = $display;
  $export['node:site_page:default'] = $panelizer;
  return $export;
}

/**
 * Implements hook_strongarm().
 */
function opensanmateo_layout_strongarm_template() {
  $export = array();

  $strongarm = new stdClass();
  $strongarm->disabled = FALSE; /* Edit this to true to make a default strongarm disabled initially */
  $strongarm->api_version = 1;
  $strongarm->name = 'panelizer_defaults_node_site_page';
  $strongarm->value = array(
    'status' => 1,
    'view modes' => array(
      'page_manager' => array(
        'status' => 1,
        'default' => 0,
        'choice' => 0,
      ),
      'default' => array(
        'status' => 0,
        'default' => 0,
        'choice' => 0,
      ),
      'teaser' => array(
        'status' => 0,
        'default' => 0,
        'choice' => 0,
      ),
    ),
  );
  $export['panelizer_defaults_node_site_page'] = $strongarm;

  return $export;
}

function opensanmateo_layout_field_custom_layout_template() {
  $field_instances = array();

  // Exported field_instance: 'node-site_page-field_custom_layout'
  $field_instances['node-site_page-field_custom_layout'] = array(
    'bundle' => 'site_page',
    'default_value' => array(
      0 => array(
        'value' => 0,
      ),
    ),
    'deleted' => 0,
    'description' => "Check this box to allow Editors and Site Managers to change this content's page layout and add custom promotions",
    'display' => array(
      'default' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'node',
    'field_name' => 'field_custom_layout',
    'label' => 'Custom Layout',
    'required' => 0,
    'settings' => array(
      'description_field' => 1,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'options',
      'settings' => array(
        'display_label' => 1,
      ),
      'type' => 'options_onoff',
      'weight' => 36,
    ),
  );

  // Translatables
  // Included for use with string extractors like potx.
  t('Custom Layout');

  return $field_instances;
}
