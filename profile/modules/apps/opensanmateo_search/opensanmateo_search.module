<?php
/**
 * @file
 * Code for the OpenSanMateo Search feature.
 */

include_once 'opensanmateo_search.features.inc';
include_once 'opensanmateo_search.features.field_instance_do_not_index.inc';
include_once 'opensanmateo_search.features.field_instance_share.inc';
include_once 'opensanmateo_search.features.field_instance_summary.inc';
include_once 'opensanmateo_search.features.field_instance_qs.inc';
include_once 'opensanmateo_search.features.field_instance_subject.inc';
include_once 'opensanmateo_search.features.field_instance_topic.inc';
include_once 'opensanmateo_search.features.field_instance_sub_type.inc';

/**
 * Implements hook_search_api_query_alter().
 *
 * Restricts the search results to the content types selected in the app
 */
/*
function opensanmateo_search_search_api_query_alter($query) {
  $types = array_filter(variable_get('opesanmateo_search_content_types_to_index', array()));
  $exclude_types = array_diff(array_map(function($i) {return $i->type;}, node_type_get_types()), $types);

  $filter = $query->createFilter('AND');
  foreach ($exclude_types as $type) {
    $filter->condition('type', $type, '<>');
  }
  $query->filter($filter);
}
*/

/**
 * Implements hook_menu().
 */
function opensanmateo_search_menu() {
  // Term autocomplete callback for list views.
  $items['opensanmateo_search_term_autocomplete/autocomplete'] = array(
    'page callback' => 'opensanmateo_search_aggregated_term_autocomplete_callback',
    'access callback' => TRUE,
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_views_data_alter().
 */
function opensanmateo_search_views_data_alter(&$data) {

  // By default lists will always use SearchApiViewsHandlerFilter, which doesn't
  // allow for multi-value input, and also doesn't allow for "AND" / "OR" matching
  // on terms.
  if (!empty($data['search_api_index_san_mateo_content_index']['search_api_multi_aggregation_8'])) {
    $field =& $data['search_api_index_san_mateo_content_index']['search_api_multi_aggregation_8'];

    // Set the handler to an OptionsList, which is closest to what we are doing.
    $field['filter']['handler'] = 'OpenSanMateoSearchViewsAutocomplete';


    //$field['filter']['options'] = $matches;
    // Set the field as multi-value.
    $field['filter']['multi-valued'] = TRUE;
  }
}

/**
 * Provide term reference autocomplete for the list by type widget.
 */
function opensanmateo_search_aggregated_term_autocomplete_callback($str = 0) {
  $matches = array();
  $current_values = explode(',', $str);
  $num_current_values = count($current_values) - 1;
  $search_value = trim(array_pop($current_values));

  // If we have existing values, ensure those are retained with the autocomplete
  // suggestion.
  if ($num_current_values > 0) {
    $existing_values = implode(',', $current_values);
  }

  $response = openansanmateo_search_termquery('.*' . preg_quote($search_value) . '.*');

  // Parse any matches we have and return the autocomplete json.
  if ($response->code == 200) {
    $potential_matches = drupal_json_decode($response->data);
    if (!empty($potential_matches['terms']['sm_search_api_multi_aggregation_8'])) {
      foreach ($potential_matches['terms']['sm_search_api_multi_aggregation_8'] as $term => $term_count) {
        if (isset($existing_values)) {
          $matches[$existing_values . ', ' . $term] = $term . ' (' . $term_count . ')';
        }
        else {
          $matches[$term] = $term . ' (' . $term_count . ')';
        }
      }
    }
  }

  drupal_json_output($matches);
}

function openansanmateo_search_termquery($regex) {
  // Query the terms component of solr to match autocomplete. Limit to 20
  // suggestions.
  // @see http://wiki.apache.org/solr/TermsComponent
  $server = search_api_server_load('san_mateo_solr_server');
  $uri = "terms";
  $params = array(
    'terms' => 'true',
    'terms.fl' => 'sm_search_api_multi_aggregation_8',
    'terms.regex' => $regex,
    'terms.limit' => '20'
  );

  $connection = $server->getSolrConnection();
  $response = $connection->makeServletRequest($uri, $params);

  return $response;
}

/**
 * Validate views_content_views_panes_content_type_edit_form().
 */
function opensanmateo_search_views_content_views_panes_content_type_edit_form_validate($form, &$form_state) {
  // Views expects multi-value results in an array, not a comma separated list,
  // so expand the list here.
  if (!empty($form_state['values']['exposed']['search_api_multi_aggregation_8'])) {
    $terms = explode(',' , $form_state['values']['exposed']['search_api_multi_aggregation_8']);
    // Unset previous value.
    unset($form_state['values']['exposed']['search_api_multi_aggregation_8']);
    // Format array.
    foreach ($terms as &$term) {
      $term =  trim($term);
      $response = openansanmateo_search_termquery($term);

      if ($response->code == 200) {
        $potential_matches = drupal_json_decode($response->data);
        if (empty($potential_matches['terms']['sm_search_api_multi_aggregation_8'][$term])) {
          form_set_error('search_api_multi_aggregation_8', t('The term %term is invalid', array('%term' => $term)));
        }
      }
      $form_state['values']['exposed']['search_api_multi_aggregation_8'][$term] = $term;
    }
  }
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function opensanmateo_search_form_views_content_views_panes_content_type_edit_form_alter(&$form, &$form_state) {
  $view = $form_state['view'];

  // sort_by and sort_order were not getting set automatically, potentially because the search_api
  // values do not match standard drupal sorting values. Either way, just force a #default_value
  // here.
  if (!empty($form['exposed']['sort_by']) && !empty($view->exposed_input['sort_by'])) {
    $form['exposed']['sort_by']['#default_value'] = $view->exposed_input['sort_by'];
  }

  if (!empty($form['exposed']['sort_order']) && !empty($view->exposed_input['sort_order'])) {
    $form['exposed']['sort_order']['#default_value'] = $view->exposed_input['sort_order'];
  }

  // If the term field is present.
  // Disable this one for future refinement w/out tossing the code
  if (!empty($form['exposed']['filter-search_api_multi_aggregation_8'])) {
    // Alias field for eas of use.
    $element =& $form['exposed']['filter-search_api_multi_aggregation_8']['search_api_multi_aggregation_8'];

    // Set type to textfield and unset the options array.
    $element['#type'] = 'textfield';
    unset($element['#options']);

    // Process stored values (if any) into something suitable for an autocomplete (comma delimited list).
    if (!empty($form_state['conf']['exposed']['search_api_multi_aggregation_8']) && is_array($form_state['conf']['exposed']['search_api_multi_aggregation_8'])) {
      $element['#default_value'] = implode(', ', $form_state['conf']['exposed']['search_api_multi_aggregation_8']);
    }

    // Give it an autocomplete path.
    $element['#autocomplete_path'] = 'opensanmateo_search_term_autocomplete/autocomplete';

    // Add validation (for processing results back into the array views expects).
    $form['#validate'][] = 'opensanmateo_search_views_content_views_panes_content_type_edit_form_validate';
  }
}

/**
 * Implements hook_api_index_items_alter().
 */
function opensanmateo_search_search_api_index_items_alter(array &$items, SearchApiIndex $index) {
  if ($index->item_type == 'file') {
    $types = array_filter(variable_get('opensanmateo_search_file_types_to_index', array()));
    foreach($items as $id => $item) {
      $lang= 'und';
      //TODO: It seems that files do not have language this might not always be the case and this might need
      //change
      if (!in_array($item->type, $types)) {
        unset($items[$id]);
      }
      elseif (!$item->field_share[$lang][0]['value']) {
        unset($items[$id]);
      }
    }
  }
  else {
    $types = array_filter(variable_get('opensanmateo_search_content_types_to_not_index', array()));
    foreach($items as $id => $item) {
      if (in_array($item->type, $types)) {
        unset($items[$id]);
      }
      elseif ($item->field_do_not_index[$item->language][0]['value']) {
        unset($items[$id]);
      }
    }
  }
}

/**
 * This is the quick serach callback that we used for finding our quick search links
 */
function opensanmateo_search_qs_callback($search) {
  /**
   * This is how one could use a view to pull this data.  One might want to do that if
   * the conditions for the search get kind of crazy
   *
  $view = views_get_view('opensanmateo_quick_search');
  $view->set_arguments(array($search));
  $view->pre_execute();
  $view->execute();
  foreach($view->result as $result) {
    $item = $result->_entity_properties;
    $rtn[] = l($item['title'], $item['url']);
  }
  */

  $results =  search_api_query('san_mateo_quick_search_index')->keys($search)->execute();
  $rtn = array();
  foreach($results['results'] as $result) {
    $item = $result['fields'];
    $rtn[] = l($item['title'], $item['url']);
  }
  return $rtn;
}


/**
 *  Implementation of hook_form_alter().
 *
 *  Here we set a quick search callback on our search field
 */
function quick_search_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if($form_state['view']->name == 'opensanmateo_media_browser') {
    return;
  }

  $form['search_api_views_fulltext']['#pre_render'][] = 'quick_search_process_search';
  $form['search_api_views_fulltext']['#attributes']['quick_search_callback'] = 'opensanmateo_search_qs_callback';
}

/**
 * Implementation of hook_block_info().
 */
function opensanmateo_search_block_info() {
  // This example comes from node.module.
  $blocks['header_search'] = array(
    'info' => t('Header Search'),
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function opensanmateo_search_block_view($delta = '') {
 $block = array();

  if ($delta == 'header_search') {
      $block['content'] = drupal_get_form('opensanmateo_search_header_search_form');
  }

  return $block;
}

/**
 * Provides the header search form.
 */
function opensanmateo_search_header_search_form($form, $form_state) {
  $form = array();

  $form['search'] = array(
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => t('Search All Departments'),
      'class' => array('header-search-field')
    ),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#attributes' => array(
      'class' => array('header-search-submit')
    ),
    '#value' => t('Search'),
  );
  $form['#action'] = url('');

  return $form;
}

/**
 * Provides a form submitter for the header search form.
 */
function opensanmateo_search_header_search_form_submit($form, $form_state) {
  $options = array();

  if (!empty($form_state['values']['search'])) {
    $options['query'] = array(
      'search_api_views_fulltext' => $form_state['values']['search'],
    );
  }

  drupal_goto('search/site', $options);
}

/**
 * Implementation of template_preprocess_views_view_fields().
 */
function opensanmateo_search_preprocess_views_view_fields(&$vars) {
  $view = $vars['view'];
  if ($view->name == 'opensanmateo_search') {
    if (!empty($vars['row']->_entity_properties['url'])) {
      $read_more = "<span class='read-more-title'>" . t('View !event', array('!event' => check_plain($vars['row']->_entity_properties['title'][0]))) . "</span>";

      $link_options = array(
        'attributes' => array(
          'class' => array('read-more')
        ),
        'html' => TRUE,
      );

      if(in_array($view->current_display, array('panel_pane_4', 'page_1'))) {
        if($view->current_display == 'panel_pane_4') { $more_link_text = t('View info');}
        drupal_add_js(drupal_get_path('module', 'opensanmateo_search') . '/js/events.js');
      }
      else {
        $more_link_text = t('View');
      }

      $vars['fields']['more_link'] = "<div class='read-more-wrapper clearfix'>" . l($more_link_text . $read_more, $vars['row']->_entity_properties['url'], $link_options) . "</div>";
    }
  }
}

/**
 * implements hook_features_template_info()
 */
function opensanmateo_search_features_template_info() {
  $all_content_types = array_map(function($i) {return $i->type;}, node_type_get_types());
  $content_types = variable_get('opensanmateo_search_content_types_to_not_index', array());
  $data = array();
  foreach($all_content_types as $content_type) {
    $data[] = array(
      'entity_type' => 'node',
      'bundle_type' => $content_type,
      'field' => 'field_do_not_index',
      'plugin' => 'field_instance',
      'deleted' => isset($content_types[$content_type]) &&  $content_types[$content_type],
      'template' => 'opensanmateo_search_field_default_field_instances_dni_template'
    );
    $data[] = array(
      'entity_type' => 'node',
      'bundle_type' => $content_type,
      'field' => 'field_quick_search',
      'plugin' => 'field_instance',
      'deleted' => isset($content_types[$content_type]) &&  $content_types[$content_type],
      'template' => 'opensanmateo_search_field_default_field_instances_qs_template'
    );
    $data[] = array(
      'entity_type' => 'node',
      'bundle_type' => $content_type,
      'field' => 'field_subject',
      'plugin' => 'field_instance',
      'deleted' => isset($content_types[$content_type]) &&  $content_types[$content_type],
      'template' => 'opensanmateo_search_field_default_field_instances_subject_template'
    );
    $data[] = array(
      'entity_type' => 'node',
      'bundle_type' => $content_type,
      'field' => 'field_topic',
      'plugin' => 'field_instance',
      'deleted' => isset($content_types[$content_type]) &&  $content_types[$content_type],
      'template' => 'opensanmateo_search_field_default_field_instances_topic_template'
    );
    $data[] = array(
      'entity_type' => 'node',
      'bundle_type' => $content_type,
      'field' => 'field_sub_type',
      'plugin' => 'field_instance',
      'deleted' => isset($content_types[$content_type]) &&  $content_types[$content_type],
      'template' => 'opensanmateo_search_field_default_field_instances_sub_type_template'
    );
  }
  $file_types = variable_get('opensanmateo_search_file_types_to_index', array());
  foreach($file_types as $file_type => $present) {
    $data[] = array(
      'entity_type' => 'file',
      'bundle_type' => $file_type,
      'field' => 'field_summmary',
      'plugin' => 'field_instance',
      'deleted' => !$present,
      'template' => 'opensanmateo_search_field_default_field_instances_summary_template'
    );
    $data[] = array(
      'entity_type' => 'file',
      'bundle_type' => $file_type,
      'field' => 'field_share',
      'plugin' => 'field_instance',
      'deleted' => !$present,
      'template' => 'opensanmateo_search_field_default_field_instances_share_template'
    );
    $data[] = array(
      'entity_type' => 'file',
      'bundle_type' => $file_type,
      'field' => 'field_subject',
      'plugin' => 'field_instance',
      'deleted' => !$present,
      'template' => 'opensanmateo_search_field_default_field_instances_subject_template'
    );
  }
  return $data;
}

function opensanmateo_search_file_presave($file) {
}

function opensanmateo_search_filefield_sources_info() {
  $sources = array();

  // Provide a potential Flickr source to import Flickr photos.
  $sources['opensanmateo_search'] = array(
    'name' => t('Shared Files'),
    'label' => t('SHared FIles'),
    'description' => t('Select a file from Flickr.'),
    // This callback function does all the heavy-work of creating a form element
    // to choose a Flickr photo and populate a field. For an example, see
    // filefield_source_remote_process().
    'process' =>'opensanmateo_search_shared_file_process',
    // This callback function then takes the value of that field and saves the
    // file locally. For an example, see filefield_source_remote_value().
    'value' =>'opensanmateo_search_shared_file_value',
    'weight' => 3,
    // This optional setting will ensure that your code is included when needed
    // if your value, process, or other callbacks are located in a file other
    // than your .module file.
   # 'file' => 'include/mymodule.flickr_source.inc',
  );
  return $sources;
}

function opensanmateo_search_shared_file_process($element, &$form_state, $form) {
  $element['opensanmateo_search_shared_file'] = array(
    '#weight' => 100.5,
    '#theme' => 'opensanmateo_search_source_remote_element'
    //'#filefield_sources_hint_text' => FILEFIELD_SOURCE_REMOTE_HINT_TEXT,
  );
  $element['opensanmateo_search_shared_file']['view'] = array(
    '#markup' =>  views_embed_view('opensanmateo_media_browser', 'page'). 'baseball',
  );
  $element['opensanmateo_search_shared_file']['uri'] = array(
    '#type' => 'textfield',
    '#title' => 'url',
  );
  return $element;
}

function opensanmateo_search_shared_file_value($element, &$item) {
/*
  if (isset($item['opensanmateo_search_shared_file']['uri']) && strlen($item['opensanmateo_search_shared_file']['uri']) > 0 && valid_uri($item['opensanmateo_search_shared_file']['uri'])) {
  }
*/
  if (isset($item['opensanmateo_search_shared_file']['uri']) && strlen($item['opensanmateo_search_shared_file']['uri']) > 0) {
    $extra = uniqid();
    $uri = $item['opensanmateo_search_shared_file']['uri'];
    $file = (object) array(
      # 'uri' => "public://" . $row->_entity_properties['name'],
      'uri' => $uri . "#$extra",
      'type' => 'image',
      'status' => 0,
    );
    file_save($file);
    $item['fid'] = $file->fid;
  }
}

function theme_opensanmateo_search_source_remote_element($variables) {
  $element = $variables['element'];
  $element['url']['#field_suffix'] = drupal_render($element['transfer']);
  return '<div class="filefield-source filefield-source-opensanmateo clear-block">' .
  drupal_render($element['view']) .
  drupal_render($element['uri']) .
  '</div>';
}

/**
 * Implements hook_theme().
 */
function opensanmateo_search_theme() {
  return array(
    'opensanmateo_search_source_remote_element' => array(
      'render element' => 'element',
     # 'file' => 'sources/remote.inc',
    ),
 );
}


/**
 * Implements hook_field_widget_properties_alter()
 *
 * we want to turn on the remote file setting for image fields
 */
function opensanmateo_search_field_widget_properties_alter(&$widget, $context) {
  if($widget['type'] == 'image_image') {
    $widget['settings']['filefield_sources']['filefield_sources']['osmremotefile'] = 'osmremotefile';
  }
}


/**
 * implements hook_sanmateo_master_is_set
 */
function opensanmateo_search_sanmateo_master_is_set($base) {
  $vocabs = array(
    'subject',
    'sub_type'
  );

  foreach($vocabs as $name) {
    if ($base) {
      variable_set(TAXONOMY_SYNC_CLIENT_PREFIX . $name, "http://$base/taxonomy-sync/list/$name");
    }
    else {
      variable_del(TAXONOMY_SYNC_CLIENT_PREFIX . $name);
    }
  }
}
/**
 * implements hook_sanmateo_master_is_set
 */
function opensanmateo_search_sanmateo_is_master_set($is_master) {
  $vocabs = array(
    'subject',
    'sub_type'
  );
  foreach($vocabs as $name) {
    variable_set(TAXONOMY_SYNC_MASTER_PREFIX . $name,  $is_master);
  }
}

/**
 * helper function to parse out the different facet names and id for creating new facets
 * @see opensanmateo_search_facetapi_facet_info_alter()
 */
function opensanmateo_search_get_term_facets() {
  $facets = array();
  foreach(explode("\n", variable_get('opensanmateo_search_term_facets', '')) as $name) {
    $name = trim($name);
    $id = preg_replace("/ /", "", $name);
    $facets[$id] = $name;
  }
  return $facets;
}

/**
 * Manage new facets
 *
 * We are adding facet that are copies of the Aggregated Terms Facet
 *
 */
function opensanmateo_search_facetapi_facet_info_alter(array &$facet_info, array $searcher_info) {
  if(isset($facet_info['search_api_multi_aggregation_8'])) {
    foreach(opensanmateo_search_get_term_facets() as $id => $name) {
      $facet_info[$id] = $facet_info['search_api_multi_aggregation_8'];
      $facet_info[$id]['label'] = $name;
      $facet_info[$id]['enabled'] = TRUE;
      $facet_info[$id]['name'] = $id;
    }
  }
}

/**
* Implements hook_facetapi_filters().
*/
function opensanmateo_search_facetapi_filters() {
  return array(
    'child_terms' => array(
      'handler' => array(
        'label' => t('Single Taxonomy Branch'),
        'class' => 'FacetapiFilterChildTerms',
      ),
    ),
  );
}

/**
 * Implements hook_permission().
 *
 * Defines the 'edit quick search tags' permission
 */
function opensanmateo_search_permission() {
  return array(
    'edit quick search tags' => array(
      'title' => t('Edit Quick Search Tags'),
      'description' => t('Edit Quick Search tags on all content types.'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 *
 * Disables the Quick Search tags field if the permission isn't set.
 */
function opensanmateo_search_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'views_exposed_form' && $form['#id'] =='views-exposed-form-opensanmateo-search-page-1') {
    // Type filter
    $form['type']['#type'] = 'select';
    $form['type']['#title']= t('Type');
    $taxonomy_subject = taxonomy_vocabulary_machine_name_load('subject');
    $terms = taxonomy_get_tree($taxonomy_subject->vid);
    $type_options = array('0' => t('None'));
    foreach ($terms as $data) {
      $term_name = $data->name;
      if($data->parents[0] != 0) {
        $term_name = '--' . $term_name;
      }
      $type_options[$data->name] = $term_name;
    }
    $form['type']['#options'] = $type_options;

    // Start and end date filters
    $parameters = drupal_get_query_parameters();
    $start_day = isset($parameters['start_date']['date'])?$parameters['start_date']['date']:arg(2);
    $end_day = isset($parameters['end_date']['date'])?$parameters['end_date']['date']:arg(3);
    if ($start_day == 'all') {
      $start_day = date('Y-m-d');
      $end_day = date('Y-m-d');
    }

    if ($end_day == 'all') {
      $end_day = date('Y-m-d');
    }

    $form['start_date']['#type'] = 'date_popup';
    $form['start_date']['#size'] = '16';  
    $form['start_date']['#title'] = t(''From');
    $form['start_date']['#date_format'] = 'Y-m-d';
    $form['start_date']['#default_value'] = $start_day;
    $form['end_date']['#type'] = 'date_popup';
    $form['end_date']['#size'] = '16';  
    $form['end_date']['#title'] = t('To');
    $form['end_date']['#date_format'] = 'Y-m-d';
    $form['end_date']['#default_value'] = $end_day;
  } 
  
  if (!isset($form['field_quick_search'])) {
    return;
  }

  if (!user_access('edit quick search tags')) {
    $form['field_quick_search']['#disabled'] = TRUE;
  }
}

/**
* Plugin that filters taxonomy terms to be just the children of a particular term
*/
class FacetapiFilterChildTerms extends FacetapiFilter {

  /**
   * Filters facet items.
   */
  public function execute(array $build) {
    $tid = $this->settings->settings['parent_term'];
    $pterm = taxonomy_term_load($tid);
    $tree = taxonomy_get_tree($pterm->vid, $pterm->tid);
    foreach($tree as $term) {
      $terms[] = $term->name;
    }
    foreach($build as $key => $item) {
      if(!in_array($key, $terms)) {
        unset($build[$key]);
      }
    }
    return $build;
  }
  public function settingsForm(&$form, &$form_state) {
    $vocs = taxonomy_get_vocabularies();
    foreach($vocs as $id => $voc) {
      $tree = taxonomy_get_tree($id);
      $terms = array();
      $current = array();
      foreach($tree as $i => $term) {
        $terms[$term->tid]['name'] = $term->name;
        if($term->depth) {
          $terms[$term->parents[0]]['count'] = isset($terms[$term->parents[0]]['count']) ? $terms[$term->parents[0]]['count'] + 1  : 1;
        }
      }
      foreach($terms as $id => $term) {
        if (isset($term['count'])) {
          $terms[$id] = $term['name'] . " (" . $term['count'] . ")";
        }
        else {
          unset($terms[$id]);
        }
      }
      $options[$voc->name]= $terms;

    }
    $form['parent_term'] = array(
      '#type' => 'select',
      '#options' => $options,
      '#title' => 'Parent Term'
    );
  }

}

/**
 * Implements hook_search_api_alter_callback_info
 */
function opensanmateo_search_search_api_alter_callback_info() {
  $callbacks['search_opensanmateo_image'] = array(
    'name' => t('Image style URL for unified teaser'),
    'description' => t('Provides an absolute image style URL for the thumbnail image'),
    'class' => 'SearchApiRenderedImage',
    'weight' => 999,
  );
  $callbacks['search_opensanmateo_summary'] = array(
    'name' => t('Generate summary'),
    'description' => t('If no summary is present, generate one from body text'),
    'class' => 'SearchApiNodeSummary',
    'weight' => 999,
  );

  return $callbacks;
}

/**
 * Implements hook_default_search_api_server_alter
 * We're using this to flip the default search server to Acquia's instances based on their hosting env vars
 */
function opensanmateo_search_default_search_api_server_alter(array &$defaults) {
  global $_ENV;

  // If we have the Solr server definition already set AND we're in the Acquia Cloud, swap out server definitions
  if (isset($defaults['san_mateo_solr_server']) && isset($_ENV['AH_SITE_ENVIRONMENT'])) {
    $defaults['san_mateo_solr_server'] = entity_import('search_api_server', '{
      "name" : "San Mateo Solr Server [Acquia]",
      "machine_name" : "san_mateo_solr_server",
      "description" : "",
      "class" : "acquia_search_service",
      "options" : {
        "scheme" : "http",
        "host" : "useast1-c1.acquia-search.com",
        "port" : "80",
        "path" : "\\/solr\\/' . variable_get('acquia_identifier', '') . '",
        "edismax" : 0,
        "modify_acquia_connection" : 0,
        "http_user" : "",
        "http_pass" : "",
        "excerpt" : 0,
        "retrieve_data" : 1,
        "highlight_data" : 0,
        "http_method" : "POST"
      },
      "enabled" : "1",
      "rdf_mapping" : []
    }');
  }
}

function opensanmateo_search_search_api_query_alter(SearchApiQueryInterface $query) {
  if(arg(0) == 'events' && arg(1) == 'list') {
    $parameters = drupal_get_query_parameters();

    //Filter content by type
    if($parameters['type']) {
      $query->condition('search_api_multi_aggregation_14', $parameters['type'], '=');
    }

    $start_day = isset($parameters['start_date']['date'])?$parameters['start_date']['date']:arg(2);
    $end_day = isset($parameters['end_date']['date'])?$parameters['end_date']['date']:arg(3);
    if($start_day != '' and $start_day != 'all' and $end_day == 'all') {
      $start_day = strtotime($start_day);
      $query->condition('event_start_day', $start_day, '<=');
      $query->condition('event_end_day', $start_day, '>=');
    }
    else if($end_day != 'all') {
      $start_day = strtotime($start_day);
      $end_day = strtotime($end_day);
      $query->condition('event_start_day', $start_day, '>=');
      $query->condition('event_end_day', $end_day, '<=');
    }
    else if($start_day == 'all') {
      $start_day = strtotime(date('Y-m-d'));
      // Select events in progress
      $left_filter = $query->createFilter('AND');
      $left_filter->condition('event_start_day', $start_day, '<=');
      $left_filter->condition('event_end_day', $start_day, '>=');
     
      // Select events with a start date in the future
      $right_filter = $query->createFilter('AND');
      $right_filter->condition('event_start_day', time(), '>=');

      $main_filter = $query->createFilter('OR');
      $main_filter->filter($left_filter);
      $main_filter->filter($right_filter);
      
      $query->filter($main_filter);
     }
  } 
}

/**
 * Implements hook_entity_property_info_alter().
 */
function opensanmateo_search_entity_property_info_alter(&$info) {
  $info['node']['properties']['event_start_day'] = array(
    'type' => 'text',
    'label' => t('Event Start Day'),
    'sanitized' => TRUE,
    'getter callback' => 'opensanmateo_search_search_api_property_event_start_day_getter_callback',
  );
  $info['node']['properties']['event_end_day'] = array(
    'type' => 'text',
    'label' => t('Event End Day'),
    'sanitized' => TRUE,
    'getter callback' => 'opensanmateo_search_search_api_property_event_end_day_getter_callback',
  );
}

/**
 * Getter callback for event start day.
 */
function opensanmateo_search_search_api_property_event_start_day_getter_callback($item) {
  return strtotime(substr($item->field_event_date[LANGUAGE_NONE][0]['value'], 0, 10)); 
}
 
/**
 * Getter callback for event end day.
 */
function opensanmateo_search_search_api_property_event_end_day_getter_callback($item) {
  // Set time at midnight of end day of event
  if($item->field_event_date[LANGUAGE_NONE][0]['value2'] != '') {
    return strtotime(substr($item->field_event_date[LANGUAGE_NONE][0]['value2'], 0, 10)) + 86399;
  }
  else {
    return strtotime(substr($item->field_event_date[LANGUAGE_NONE][0]['value'], 0, 10)) + 86399;
  }
}
 

/**
 * Implements hook_date_views_extra_tables().
 */
function opensanmateo_search_date_views_extra_tables() {
  return array('search_api_index_san_mateo_content_index' => 'search_api_index_san_mateo_content_index');
}

/**
 * Search API data alteration callback that adds an URL field for all items.
 */
class SearchApiRenderedImage extends SearchApiAbstractAlterCallback {

  /**
   * Implements SearchApiAlterCallbackInterface::configurationForm().
   */
  public function configurationForm() {
    $form = array();

    // Collect image styles.
    $styles = image_styles();
    $style_options = array();
    foreach ($styles as $key => $style) {
      $style_options[$key] = $style['name'];
    }
    asort($style_options);

    // Collect node types.
    $node_types = node_type_get_names();

    // Offer up image styles
    $form['image_style'] = array(
     '#tree' => TRUE,
    );
    $form['image_style']['__default'] = array(
      '#type' => 'select',
      '#title' => t('Select default image style to apply to thumbnail image for nodes'),
      '#multiple' => FALSE,
      '#required' => FALSE,
      '#empty_option' => t('- None -'),
      '#options' => $style_options,
      '#default_value' => !empty($this->options['image_style']['__default']) ? array($this->options['image_style']['__default']) : '',
    );
    foreach ($node_types as $node_type => $name) {
      $form['image_style'][$node_type] = array(
        '#type' => 'select',
        '#title' => t('Select image style override for %node_type', array('%node_type' => $name)),
        '#multiple' => FALSE,
        '#required' => FALSE,
        '#empty_option' => t('- Default -'),
        '#options' => $style_options,
        '#default_value' => !empty($this->options['image_style'][$node_type]) ? array($this->options['image_style'][$node_type]) : '',
      );
    }

    return $form;
  }

  /**
   * Alter items before indexing
   */
  public function alterItems(array &$items) {
    foreach ($items as $id => &$item) {
      // Get image style we are to use for this node type.
      $image_style = !empty($this->options['image_style'][$item->type]) ? $this->options['image_style'][$item->type] : $this->options['image_style']['__default'];

      // If we have a valid thumbnail field, use the first image as the styled teaser URL
      $thumb = field_get_items('node', $item, 'field_thumbnail_image');
      if (!empty($thumb[0]['uri'])) {
        // If image style provided, use it - otherwise raw image URL.
        $item->opensanmateo_search_style_url = !empty($image_style) ? image_style_url($image_style, $thumb[0]['uri']) : $thumb[0]['uri'];
      }

      // Use a profile image if it exists.
      $profile = field_get_items('node', $item, 'field_profile_photo');
      if (!empty($profile[0]['uri'])) {
        // If image style provided, use it - otherwise raw image URL.
        $item->opensanmateo_search_style_url = !empty($image_style) ? image_style_url($image_style, $profile[0]['uri']) : $profile[0]['uri'];
      }
    }
  }

  public function propertyInfo() {
    return array(
      'opensanmateo_search_style_url' => array(
        'label' => t('Thumbnail site url'),
        'description' => t('A url styled'),
        'type' => 'uri',
      ),
    );
  }

}

/**
 * Search API data alteration callback that creates a summary from body text if none exists.
 */
class SearchApiNodeSummary extends SearchApiAbstractAlterCallback {

  /**
   * Implements SearchApiAlterCallbackInterface::configurationForm().
   */
  public function configurationForm() {
    $form = array();

    $form['trim_length'] = array(
      '#type' => 'textfield',
      '#title' => t('Trim length for auto-generated summary'),
      '#default_value' => !empty($this->options['trim_length']) ? $this->options['trim_length'] : 100,
    );

    return $form;
  }

  /**
   * Alter items before indexing
   */
  public function alterItems(array &$items) {
    foreach ($items as $id => &$item) {
      // If our aggregated summary field is empty, fudge something from the body text if that's not empty
      $body = field_get_items('node', $item, 'body');
      if (empty($item->search_api_multi_aggregation_1[0]) && !empty($body[0]['safe_value'])) {
        $item->search_api_multi_aggregation_1[0] = text_summary(strip_tags($body[0]['safe_value']), NULL, $this->options['trim_length']);
      }
    }
  }

}

