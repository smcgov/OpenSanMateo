<?php
/**
 * @file
 *   Code for the openpublic person feature.
 */

include_once('openpublic_person.features.inc');

/**
 * Implements hook_form_FORM_ID_alter() for profile_node_form.
 *
 * Used to add some javascript to the node edit form to manipulate the page while editing.
 */
function openpublic_person_form_profile_node_form_alter(&$form, $form_state) {
  $settings = array();
  $settings_fields = array(
    'firstName' => 'field_profile_first_name',
    'lastName' => 'field_profile_last_name',
    'orgName' => 'field_profile_organization',
  );
  //TODO: Find a better way to get the id attribute from an input element
  foreach ($settings_fields as $js_var_name => $field_name) {
    $lang = $form[$field_name]['#language'];
    $field_id = '#edit-' . str_replace('_', '-', $form[$field_name][$lang][0]['value']['#field_name']) . '-' . $lang . '-0' . '-value';
    $settings[$js_var_name] = $field_id;
  }

  $form['title']['#attributes']['readonly'] = TRUE;
  $form['title']['#description'] = t('This is set by entering the First and Last name or Organization name. It will be filled in automatically, and used as the display name throughout the site.');
  $form['title']['#attached'] = array(
    'js' => array(
      drupal_get_path('module', 'openpublic_person') . '/openpublic_person.js',
      array(
        'type' => 'setting',
        'data' => array('openpublic_person' => $settings),
      ),
    ),
  );
}


/**
 * Default content types to add author field to.
 */
function _openpublic_person_default_types() {
  return array(
    'blog_entry' => 'blog_entry',
    'photo' => 'photo',
    'document' => 'document',
  );
}

/**
 * Implements hook_features_template_info().
 */
function openpublic_person_features_template_info() {
  $content_types = variable_get('openpublic_person_author_field_content_types', _openpublic_person_default_types());
  $data = array();
  foreach ($content_types as $content_type => $present) {
    // Only have an entry if this will exist or needs to be deleted.
    if ($present || field_info_instance('node', 'field_author', $content_type) && node_type_get_type($content_type)) {
      $data[] = array(
        'plugin' => 'field_instance',
        'template' => 'openpublic_person_field_default_field_instances_template',
        'deleted' => empty($present),
        'entity_type' => 'node',
        'bundle_type' => $content_type,
        'field' => 'field_author',
      );
    }
  }
  return $data;
}

/**
 * Template callback for field_author.
 */
function openpublic_person_field_default_field_instances_template() {
  return array(
    'field_author' => array(
      'default_value' => NULL,
      'deleted' => 0,
      'description' => '',
      'display' => array(
        'default' => array(
          'label' => 'hidden',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 5,
        ),
        'teaser' => array(
          'label' => 'above',
          'settings' => array(),
          'type' => 'hidden',
          'weight' => 0,
        ),
      ),
      'entity_type' => 'node',
      'field_name' => 'field_author',
      'label' => 'Author',
      'required' => 0,
      'settings' => array(
        'user_register_form' => FALSE,
      ),
      'widget' => array(
        'active' => 1,
        'module' => 'node_reference',
        'settings' => array(
          'autocomplete_match' => 'contains',
          'autocomplete_path' => 'node_reference/autocomplete',
          'references_dialog_add' => 1,
          'references_dialog_edit' => 1,
          'references_dialog_search' => 1,
          'references_dialog_search_view' => '',
          'size' => 60,
        ),
        'type' => 'node_reference_autocomplete',
        'weight' => 2,
      ),
    ),
  );
}


