<?php
/**
 * @file
 * Code for for login flow, adding two step login and temp user bans.
 */

/**
 * Implements hook_menu().
 */
function login_flow_menu() {
  $menu["admin/config/people/login-flow"] =  array(
    'title' => "Login Flow",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('login_flow_config_form'),
    'description' => 'Configure Login Flow',
    'access arguments' => array('administer users'),
    'file' => 'login_flow.admin.inc',
  );
  return $menu;
}

/**
 * Implements hook_form_FORM_ID_alter() for user_login().
 *
 * Hijacks the user validation so we can add a temporary ban and perma ban at different flood levels
 */
function login_flow_form_user_login_alter(&$form, &$form_state) {
  // Add in some custom validation.
  $pos = array_search('user_login_authenticate_validate', $form['#validate']);
  if ($pos !== FALSE) {
    array_splice($form['#validate'], $pos + 1, 0, array('login_flow_authenticate_validate'));
  }
}

/**
 * A validate handler on the login form.
 *
 * The base code this is derived from is in user.module (user_authenticate_validate)
 */
function login_flow_authenticate_validate($form, &$form_state) {
  if (!empty($form_state['values']['name']) && trim($form_state['values']['pass'])) {
    $account = db_query("SELECT * FROM {users} WHERE name = :name AND status = 1", array(':name' => $form_state['values']['name']))->fetchObject();
    if ($account) {
      $identifier = variable_get('user_failed_login_identifier_uid_only', FALSE) ? $account->uid : $account->uid . '-' . ip_address();
      // If the core flood is triggered for user, block the user.
      // The user most first successful fail the temp ban enough for this to take effect.
      if (!empty($form_state['flood_control_triggered']) && $form_state['flood_control_triggered'] = 'user') {
        // Block the user.
        $account_obj = user_load($account->uid);
        if ($account_obj = user_load($account->uid)) {
          user_save($account_obj, array('status' => 0));
        }
        // The first error message takes priority, so setting it here will set override core's message.
        form_set_error('name', format_plural(variable_get('user_failed_login_user_limit', 5), 'Sorry, there has been more than one failed login attempt for this account. It is currently blocked. Contact your administrator.', 'Sorry, there have been more than @count failed login attempts for this account. It is currently blocked. Contact your administrator.'));
        return;
      }

      // Enforce the temp ban if necessary.
      if (empty($form_state['flood_control_triggered'])) {
        $identifier = $form_state['flood_control_user_identifier'];
        $flood_count = login_flow_flood_count('failed_login_attempt_user', variable_get('user_failed_login_user_window_temporary', 86400), $identifier);
        if ($flood_count && $flood_count == variable_get('user_failed_login_user_limit_temporary', 3) - 1) {
          // Temporarily block them or see if they were already blocked.
          if (login_flow_temp_block($account->uid)) {
            // Mark that login actually failed.
            unset($form_state['uid']);
            form_set_error('name', t('Sorry, there have been too many failed login attempts for this account. It is temporarily blocked. Try again later or contact an administrator.'));
          }
        }
      }
    }
  }
}

/**
 * Temporarily blocks a user.
 *
 * @param $userid
 *   A user ID to block
 * @return bool
 *   TRUE if user is blocked, FALSE if user record doesn't exist
 */
function login_flow_temp_block($userid) {
  // Block user
  $account = user_load($userid);
  if (!$account) {
    return FALSE;
  }
  user_save($account, array('status' => 0));

  // Add/update time table with latest failed login attempt.
  db_merge('flood_temp_block')
    ->key(array('uid' => $userid))
    ->fields(array(
      'uid' => $userid,
      'time_blocked' => REQUEST_TIME,
    ))
    ->condition('uid', $userid)
    ->execute();
  return TRUE;
}

/**
 * Unblocks a user based on uid.
 */
function login_flow_unblock($userid) {
  //unblock from user table
  $account = user_load($userid);
  if (!$account) {
    return FALSE;
  }
  $account = user_save($account, array('status' => 1));

  login_flow_remove_from_table($userid); //this is probably redundant
}

/**
 * Removes entry from flood table for user id.
 */
function login_flow_remove_from_table($userid) {
  if (!is_numeric($userid)) {
    return FALSE;
  }

  $res = db_delete('flood_temp_block')
    ->condition('uid', $userid)
    ->execute();
  return $res;
}

/**
 * Implements hook_cron().
 *
 * Clears out temporarily blocked users
 */
function login_flow_cron() {
  // Get all uid's to be unblocked
  $window = variable_get('user_temporary_block_window', 1200);
  if (!is_numeric($window)) {
    $window = 1200;
  }

  $uids = db_query("SELECT uid FROM {flood_temp_block} WHERE time_blocked < :timestamp", array(
    ':timestamp' => REQUEST_TIME - $window))
    ->fetchAllKeyed();

  foreach ($uids as $userid => $emp ) {
    login_flow_unblock($userid); //unfortunately this results in a query, but it should be quick (delete from)
  }
}

/**
 * Implements hook_user_update().
 *
 * Used to remove users from the temp ban and empty their flood if they've been set to active
 */
function login_flow_user_update(&$edit, $account, $category) {
  if ($edit['original']->status != 1 && isset($edit['status']) && $edit['status'] == 1) {
    //status has been updated
    login_flow_remove_from_table( $edit['original']->uid );

    // If we know an administrator did this (rather than cron) clear their flood events
    global $user;
    if ($user->uid != 0) {
      flood_clear_event('failed_login_attempt_user', $edit['original']->uid);
    }
  }
}

/**
 * Helper function for counting floods.
 *
 * @see flood_is_allowed()
 */
function login_flow_flood_count($name, $window = 3600, $identifier = NULL) {
  if (!isset($identifier)) {
    $identifier = ip_address();
  }
  $number = db_query("SELECT COUNT(*) FROM {flood} WHERE event = :event AND identifier = :identifier AND timestamp > :timestamp", array(
    ':event' => $name,
    ':identifier' => $identifier,
    ':timestamp' => REQUEST_TIME - $window))
    ->fetchField();

  return $number;
}
